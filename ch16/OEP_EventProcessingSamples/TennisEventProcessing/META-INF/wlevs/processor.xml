<?xml version="1.0" encoding="UTF-8"?>
<n1:config xmlns:n1="http://www.bea.com/ns/wlevs/config/application">
  <processor>
    <name>tennisGameProcessor</name>
    <rules>
      <query id="tennisGameProcessor">
      <![CDATA[ 
      IStream
      (  select its.player, 1 as pointType, prettyGameScore(score0,score1) as score, matchId as matchId
         from  tennisInputChannel
      MATCH_RECOGNIZE (
      PARTITION  BY matchId
         MEASURES C.player as player, abs(sum((A.player-1)))+abs(C.player-1) as score0, sum(A.player)+C.player as score1, C.matchId as matchId
         PATTERN ( A+?  C )
         DEFINE            
            C  as (case C.player 
                    when 1 then sum(A.player) else (sum(abs((A.player-1))))
                    end >= 3
                    and case C.player 
                        when 1 then sum(A.player*2-1) else (sum(1-A.player*2))
                        end >= 1)
      ) as its
      )
      ]]>
      </query>
    </rules>
  </processor>
  <processor>
    <name>tennisSetProcessor</name>
    <rules>
      <view id="gamePoints"><![CDATA[select * from tennisOutChannel where pointType=1]]></view>
      <query id="tennisSetProcessor">
      <![CDATA[ 
      IStream
      (  select its.player, 2 as pointType,  its.score as score, matchId as matchId
         from  gamePoints
      MATCH_RECOGNIZE (
      PARTITION  BY matchId
         MEASURES C.player as player, abs(sum((A.player-1)))+abs(C.player-1)||'-'|| sum(A.player)+C.player as score, C.matchId as matchId
         PATTERN ( A+?  C )
         DEFINE            
            C  as ( case C.player 
                                                   when 1 then sum(A.player) else (sum(abs((A.player-1))))
                                                   end >= 5
                                               and case C.player 
                                                   when 1 then sum(A.player*2-1) else (sum(1-A.player*2))
                                                   end >= 1)
      ) as its
      )
      ]]>
      </query>
    </rules>
  </processor>
  <processor>
    <name>tennisMatchProcessor</name>
    <rules>
       <view id="SetPoints"><![CDATA[select * from tennisSetOutChannel where pointType=2]]></view>
        <view id="SetPointsEnriched" >
       <![CDATA[
         RStream(select T.player, T.matchId as matchId, R.player0||'-'||R.player1 as lineup 
         from SetPoints[now] as T, tennisMatchCache as R 
         where to_char(T.matchId)= R.matchIdentifier)
       ]]> 
     </view>
      <query id="tennisMatchProcessor">
      <![CDATA[ 
      IStream
      (  select its.player, 3 as pointType, lineup||' '||score0||' - '||score1 as score, matchId as matchId
         from  SetPointsEnriched
      MATCH_RECOGNIZE (
      PARTITION  BY matchId
         MEASURES C.player as player, abs(sum((A.player-1)))+abs(C.player-1) as score0, sum(A.player)+C.player as score1, C.matchId as matchId, C.lineup as lineup
         PATTERN ( A+?  C )
         DEFINE            
            C  as (case C.player 
                    when 1 then sum(A.player) 
                    else (sum(abs((A.player-1))))
                    end >= 1
                    )
      ) as its
      )
      ]]>
      </query>
    </rules>
  </processor>
  <processor>
    <name>newMatchDetector</name>
    <rules>
       <view id="TennisMatches"><![CDATA[select distinct matchId from tennisInputChannel ]]></view>
        <view id="MatchesEnriched" >
       <![CDATA[
         RStream(select T.matchId as matchId, R.player0||'-'||R.player1 as lineup 
         from TennisMatches[now] as T, tennisMatchCache as R 
         where to_char(T.matchId)= R.matchIdentifier
         )
       ]]> 
     </view>
      <query id="newMatchesDetector">
      <![CDATA[ 
      IStream
      (  select matchId as matchId, -1 as pointType, lineup as score
         from  MatchesEnriched
      )
      ]]>
      </query>
    </rules>
  </processor>
  <processor>
    <name>pausedMatchDetector</name>
    <rules>
      
       <view id="CompletedTennisMatches"><![CDATA[select matchId, pointType from tennisMatchOutputChannel]]></view>
       <view id="MatchRallypoints"><![CDATA[select matchId, pointType from tennisInputChannel ]]></view>
       <view id="MatchBeat"><![CDATA[CompletedTennisMatches union all MatchRallypoints]]></view><!-- <view id="CompletedTennisMatches"><![CDATA[select matchId, pointType from tennisMatchOutputChannel]]></view>
       <view id="MatchRallypoints"><![CDATA[select matchId, pointType from tennisInputChannel ]]></view>
       <view id="MatchBeat"><![CDATA[CompletedTennisMatches union all MatchRallypoints]]></view>-->
      <view id="pausedMatches"><![CDATA[ 
 select interrupted.matchId as matchId, -2 as pointType 
 from tennisInputChannel 
  match_recognize ( 
 partition by matchId
 measures A.matchId as matchId
 ALL MATCHES
 INCLUDE TIMER EVENTS
 pattern (A NoAction* )
 duration multiples of 5 seconds
 define 
 A as A.pointType= 0 
 , NoAction AS ( NoAction.pointType!= 0)
  ) as interrupted
 
 ]]></view>
        <view id="InterruptedMatchesEnriched" >
       <![CDATA[
         RStream(select T.matchId as matchId,R.player0||'-'||R.player1 as lineup 
         from pausedMatches[now] as T, tennisMatchCache as R 
         where to_char(T.matchId)= R.matchIdentifier
         )
       ]]> 
     </view>
      <query id="pausedMatchDetector">
      <![CDATA[ 
      IStream
      (  select matchId as matchId, -2 as pointType, lineup as score
         from  InterruptedMatchesEnriched
      )
      ]]>
      </query>
    </rules>
  </processor>
</n1:config>
