<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Sat Oct 25 07:34:31 CEST 2014
  Author:  lucas_j
  Type: BPEL 2.0 Process
  Purpose: Asynchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="AirportAccreditationRequestProcessor"
         targetNamespace="http://xmlns.oracle.com/AirportAccreditationService/AirportAccreditationService/AirportAccreditationRequestProcessor"
         xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:client="http://xmlns.oracle.com/AirportAccreditationService/AirportAccreditationService/AirportAccreditationRequestProcessor"
         xmlns:ora="http://schemas.oracle.com/xpath/extension"
         xmlns:ui="http://xmlns.oracle.com/soa/designer"
         xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:ns1="saibot.airport/security" xmlns:ns2="saibot.airport/security/ldap"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions" xmlns:ess="http://xmlns.oracle.com/scheduler"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap">

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        PARTNERLINKS                                                      
        List of services participating in this BPEL process               
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <import namespace="saibot.airport/security" location="../WSDLs/AirportAccreditationServiceWrapper.wsdl"
            importType="http://schemas.xmlsoap.org/wsdl/" ui:processWSDL="true"/>
    <partnerLinks>
        <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
        <partnerLink name="AirportAccreditationService" partnerLinkType="ns1:AirportAccreditationService"
                     partnerRole="AirportAccreditationServiceCallback" myRole="AirportAccreditationService"/>
        <partnerLink name="LDAPMediator.LDAPMediator" partnerLinkType="ns2:LDAPMediator.LDAPMediator"
                     partnerRole="LdapService"/>
    </partnerLinks>

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        VARIABLES                                                        
        List of messages and XML documents used within this BPEL process 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <variables>
        <!-- Reference to the message passed as input during initiation -->
        <variable name="inputVariable" messageType="ns1:requestForAirportAccreditationRequestMessage"/>
        <variable name="synchOutputVariable" messageType="ns1:requestForAirportAccreditationRequestMessage"/>
        <variable name="faultVariable" messageType="ns1:requestForAirportAccreditationFaultMessage"/>

        <!-- Reference to the message that will be sent back to the requester during callback -->
        <variable name="asynchOutputVariable" messageType="ns1:requestForAirportAccreditationFinalResponseMessage"/>
    </variables>

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
       ORCHESTRATION LOGIC                                               
       Set of activities coordinating the flow of messages across the    
       services integrated within this business process                  
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <sequence name="main">
        <!-- Receive input from requestor. (Note: This maps to operation defined in AirportAccreditationRequestProcessor.wsdl) -->
        <receive name="receiveInput" partnerLink="AirportAccreditationService"
                 portType="ns1:AirportAccreditationService" operation="requestAirportAccreditation" variable="inputVariable" createInstance="yes"/>
        <scope name="AirportSecurityAccreditationProcess">
            <eventHandlers>
                <onEvent partnerLink="AirportAccreditationService"
                         operation="retrieveStatusOfAirportAccreditationRequest"
                         portType="ns1:AirportAccreditationService" variable="retrieveStatusRequest"
                         element="ns1:RetrieveStatusOfAirportAccreditationRequestRequest">
                    <scope name="ReplyToStatusRequest">
                        <empty name="Empty18"/>
                    </scope>
                </onEvent>
                <onEvent bpelx:name="RequestToCancel" partnerLink="AirportAccreditationService"
                         operation="cancelRequestForAirportAccreditation" portType="ns1:AirportAccreditationService"
                         variable="cancelRequest" element="ns1:CancelRequestForAirportAccreditationRequest">
                    <scope name="HandleCancelRequest">
                        <empty name="Empty19"/>
                    </scope>
                </onEvent>
            </eventHandlers>
            <sequence>
                <scope name="InitializationandValidation">
                    <sequence name="Sequence3">
                        <scope name="ValidateRequest">
                            <empty name="Empty16"/>
                        </scope>
                        <scope name="RetrieveRequestorAndCompany">
                            <variables>
                                <variable name="RetrieveRequestor_getUser_InputVariable"
                                          messageType="ns2:getUserRequestMessage"/>
                                <variable name="RetrieveRequestor_getUser_OutputVariable"
                                          messageType="ns2:getUserResponseMessage"/>
                            </variables>
                            <sequence name="Sequence4">
                                <assign name="AssignRequestorUserId">
                                    <copy>
                                        <from>$inputVariable.part1/ns1:RequestorId</from>
                                        <to>$RetrieveRequestor_getUser_InputVariable.part1/ns2:UserId</to>
                                    </copy>
                                </assign>
                                <invoke name="RetrieveRequestor" bpelx:invokeAsDetail="no"
                                        partnerLink="LDAPMediator.LDAPMediator" portType="ns2:LdapService"
                                        operation="getUser" inputVariable="RetrieveRequestor_getUser_InputVariable"
                                        outputVariable="RetrieveRequestor_getUser_OutputVariable"/>
                            </sequence>
                        </scope>
                        <scope name="ReturnSynchronousResponse">
                            <empty name="Empty20"/>
                        </scope>
                    </sequence>
                </scope>
                <scope name="SecurityChecks">
                    <sequence>
                        <flow name="PerformSecurityChecks">
                            <sequence name="RandomThoroughCheck">
                                <scope name="DetermineIfDoRandom">
                                    <empty name="Empty15"/>
                                </scope>
                                <if name="IfDoRandom">
                                    <condition>false()</condition>
                                    <scope name="DoThoroughBackgroundCheck">
                                        <empty name="Empty10"/>
                                    </scope>
                                    <else>
                                        <empty name="DoNothing"/>
                                    </else>
                                </if>
                            </sequence>
                            <sequence name="NationalSecurityCheck">
                                <while name="WhileNotClear">
                                    <condition>false()</condition>
                                    <sequence>
                                        <scope name="RequestNationalSecurityCheck">
                                            <empty name="Empty14"/>
                                        </scope>
                                        <if name="IfOutCome">
                                            <documentation>
                                                <![CDATA[OK]]>
                                            </documentation>
                                            <condition>true()</condition>
                                            <empty name="Empty8"/>
                                            <elseif>
                                                <documentation>
                                                    <![CDATA[NOK]]>
                                                </documentation>
                                                <condition>true()</condition>
                                                <empty name="Empty7"/>
                                            </elseif>
                                            <else>
                                                <documentation>
                                                    <![CDATA[Unclear]]>
                                                </documentation>
                                                <scope name="Discuss">
                                                    <empty name="Empty9"/>
                                                </scope>
                                            </else>
                                        </if>
                                    </sequence>
                                </while>
                            </sequence>
                            <sequence name="InternalScreening">
                                <scope name="DetermineScreeningIntensity">
                                    <empty name="Empty13"/>
                                </scope>
                                <flow name="Flow2">
                                    <sequence name="Sequence">
                                        <scope name="AutomatedEvaluation">
                                            <empty name="Empty11"/>
                                        </scope>
                                    </sequence>
                                    <sequence name="Sequence1">
                                        <if name="IfAutomatedProcessing">
                                            <condition>true()</condition>
                                            <empty name="DoNothing"/>
                                            <else>
                                                <documentation>
                                                    <![CDATA[manualEvaluation]]>
                                                </documentation>
                                                <scope name="ManualRequestScreening">
                                                    <empty name="Empty12"/>
                                                </scope>
                                            </else>
                                        </if>
                                    </sequence>
                                </flow>
                            </sequence>
                        </flow>
                    </sequence>
                </scope>
                <scope name="Registration">
                    <variables>
                        <variable name="InvokeAddUser_addUser_InputVariable" messageType="ns2:addUserRequestMessage"/>
                    </variables>
                    <sequence name="Sequence2">
                        <flow name="Registration">
                            <sequence name="RecordInLDAP">
                                <assign name="PrepareAddUserInput">
                                    <copy>
                                        <from>concat($inputVariable.part1/ns1:StaffMemberToAccredit/ns1:FirstName,'.',$inputVariable.part1/ns1:StaffMemberToAccredit/ns1:LastName)</from>
                                        <to>$InvokeAddUser_addUser_InputVariable.part1/ns2:UserId</to>
                                    </copy>
                                    <copy>
                                        <from>'SASEC=0'</from>
                                        <to>$InvokeAddUser_addUser_InputVariable.part1/ns2:SaibotAirportSecurity</to>
                                    </copy>
                                    <copy>
                                        <from>concat($inputVariable.part1/ns1:StaffMemberToAccredit/ns1:FirstName,' ',$inputVariable.part1/ns1:StaffMemberToAccredit/ns1:LastName)</from>
                                        <to>$InvokeAddUser_addUser_InputVariable.part1/ns2:GivenName</to>
                                    </copy>
                                    <copy>
                                        <from>$inputVariable.part1/ns1:StaffMemberToAccredit/ns1:EmailAddress</from>
                                        <to>$InvokeAddUser_addUser_InputVariable.part1/ns2:EmailAddress</to>
                                    </copy>
                                    <copy>
                                        <from>$inputVariable.part1/ns1:StaffMemberToAccredit/ns1:EmployeeNumber</from>
                                        <to>$InvokeAddUser_addUser_InputVariable.part1/ns2:EmployeeNumber</to>
                                    </copy>
                                    <copy>
                                        <from>$inputVariable.part1/ns1:StaffMemberToAccredit/ns1:ManagerId</from>
                                        <to>$InvokeAddUser_addUser_InputVariable.part1/ns2:ManagerId</to>
                                    </copy>
                                    <copy>
                                        <from>$inputVariable.part1/ns1:StaffMemberToAccredit/ns1:MobileTelephone</from>
                                        <to>$InvokeAddUser_addUser_InputVariable.part1/ns2:MobileTelephone</to>
                                    </copy>
                                    <copy>
                                        <from>$inputVariable.part1/ns1:RequestingOrganizationId</from>
                                        <to>$InvokeAddUser_addUser_InputVariable.part1/ns2:OrganizationId</to>
                                    </copy>
                                    <copy>
                                        <from>$inputVariable.part1/ns1:StaffMemberToAccredit/ns1:FunctionTitle</from>
                                        <to>$InvokeAddUser_addUser_InputVariable.part1/ns2:FunctionTitle</to>
                                    </copy>
                                    <copy>
                                        <from>concat('Welcome',$inputVariable.part1/ns1:StaffMemberToAccredit/ns1:FirstName,'123##')</from>
                                        <to>$InvokeAddUser_addUser_InputVariable.part1/ns2:TemporaryPassword</to>
                                    </copy>
                                </assign>
                                <invoke name="InvokeAddUser" bpelx:invokeAsDetail="no"
                                        partnerLink="LDAPMediator.LDAPMediator" portType="ns2:LdapService"
                                        operation="addUser" inputVariable="InvokeAddUser_addUser_InputVariable"/>
                            </sequence>
                            <sequence name="RegisterWithPersonnelService">
                                <empty name="Empty2"/>
                            </sequence>
                            <sequence name="PrepareBadge">
                                <empty name="Empty3"/>
                            </sequence>
                        </flow>
                        <flow name="Notification">
                            <sequence name="PublishBusinessEventAboutNewStaffMember">
                                <empty name="Empty5"/>
                            </sequence>
                            <sequence name="NotifyNewStaffMember">
                                <empty name="Empty6"/>
                            </sequence>
                            <sequence name="NotifyRequestorAndCompany">
                                <empty name="Empty4"/>
                            </sequence>
                        </flow>
                    </sequence>
                </scope>
            </sequence>
        </scope>
        <assign name="PrepareAsynchResponse">
            <copy>
                <from>$inputVariable.part1/ns1:RequestorId</from>
                <to>$asynchOutputVariable.part1/ns1:RequestorId</to>
            </copy>
            <copy>
                <from>$inputVariable.part1/ns1:StaffMemberToAccredit/ns1:EmployeeNumber</from>
                <to>$asynchOutputVariable.part1/ns1:EmployeeNumber</to>
            </copy>
        </assign>
        <!-- 
          Asynchronous callback to the requester. (Note: the callback location and correlation id is transparently handled using WS-addressing.)
        -->
        <invoke name="callbackClient" partnerLink="AirportAccreditationService"
                portType="ns1:AirportAccreditationServiceCallback" operation="reportAirportAccreditationRequestOutcome" inputVariable="asynchOutputVariable"
                bpelx:invokeAsDetail="no"/>
    </sequence>
</process>